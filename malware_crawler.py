import filetype
from bs4 import BeautifulSoup
import sys
import hashlib
import re
import os
from multiprocessing import Process, current_process ,Queue, Pool
import socket
import datetime
import time
import requests
import urllib
import urllib.request
import zipfile
import json
import hashlib
import shutil
from requests import get
from pyunpack import Archive
from urllib.request import Request, urlopen

def parse(url):
    request = urllib.request.Request(url)
    request.add_header('User-Agent', 'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1)')
    http = BeautifulSoup(urllib.request.urlopen(request), "lxml")
    return http

##########################################
temp_paths = r'E:\sample\crawler\temp'
daily_malware_paths = r'E:\sample\crawler\daily'
daily_malware_paths_temp = r'E:\sample\crawler\daily\temp'
daily_malware_paths_temp2 = r'E:\sample\crawler\daily\temp2'
file_type_path = r'E:\sample\crawler\malware\filetype'
others_paths = r'E:\sample\crawler\malware\filetype\others'
if not os.path.exists(temp_paths): os.makedirs(temp_paths)
if not os.path.exists(daily_malware_paths): os.makedirs(daily_malware_paths)
if not os.path.exists(daily_malware_paths_temp): os.makedirs(daily_malware_paths_temp)
if not os.path.exists(daily_malware_paths_temp2): os.makedirs(daily_malware_paths_temp2)
if not os.path.exists(file_type_path): os.makedirs(file_type_path)
if not os.path.exists(others_paths): os.makedirs(others_paths)
##########################################


def malc0de():

    while True:
        soup=parse('http://malc0de.com/rss')
        mlc=[row for row in soup('description')][1:]
        mlc_sites = list()
        for row in mlc:
            site = re.sub('&', '&', str(row).split()[1]).replace(',', '')
            mlc_sites.append(site)

        for url in mlc_sites:
            if not re.match('http', url):url = 'http://' + url
            try:
                response=get(url)
                malware_file_data = response.content
            except:continue
            try:sha256=hashlib.sha256(malware_file_data).hexdigest()
            except:sha256=hashlib.sha256(malware_file_data.encode()).hexdigest()

            temp_file_name_full_path=os.path.join(temp_paths,sha256)
            if not os.path.isfile(temp_file_name_full_path):
                with open(temp_file_name_full_path,'wb') as file_handle:file_handle.write(malware_file_data)
            try:kind = filetype.guess(temp_file_name_full_path)
            except OSError:continue

            if kind is None:
                if len(url.split('.')[-1])<6:
                    extension=os.path.join(file_type_path,url.split('.')[-1])
                    if not os.path.exists(extension): os.makedirs(extension)
                    others_file_name_full_path=os.path.join(extension,sha256)
                else:
                    others_file_name_full_path=os.path.join(others_paths,sha256)
                shutil.move(temp_file_name_full_path,others_file_name_full_path)
                continue

            else:
                extension_paths=os.path.join(file_type_path,kind.extension)
                extension_file_name_full_path=os.path.join(extension_paths,sha256)
                if not os.path.exists(extension_paths):os.makedirs(extension_paths)
                shutil.move(temp_file_name_full_path,extension_file_name_full_path)
                continue


def dasmalwerk():
    while True:
        time.sleep(100)
        url="https://das-malwerk.herokuapp.com/"

        soup=parse(url)
        links = soup.select("tbody > tr > td > a")
        for link in links:
            malware_url = link.attrs['href']
            if 'virustotal' in malware_url:continue

            try:
                response = get(malware_url)
                malware_file_data = response.content
            except:
                continue
            try:
                sha256 = hashlib.sha256(malware_file_data).hexdigest()
            except:
                sha256 = hashlib.sha256(malware_file_data.encode()).hexdigest()

            temp_file_name_full_path = os.path.join(temp_paths, sha256)
            if not os.path.isfile(temp_file_name_full_path):
                with open(temp_file_name_full_path, 'wb') as file_handle:
                    file_handle.write(malware_file_data)
                kind = filetype.guess(temp_file_name_full_path)
                if kind.extension=='zip':
                    zFile=zipfile.ZipFile(temp_file_name_full_path)
                    zFile.setpassword(b'infected')
                    unpack_file_full_path_list=list()
                    for zfile_name in zFile.namelist():
                        #Temp 경로에 압축해제 압축해재시 압축파일 내부에 있는 이름으로 진행
                        zFile.extract(zfile_name,temp_paths)
                        #Temp에 압축해제된 파일 풀 경로 설정
                        unpack_file_full_path=os.path.join(temp_paths,zfile_name)
                        unpack_file_full_path_list.append(unpack_file_full_path)
                    zFile.close()
                    os.remove(temp_file_name_full_path)

                    for unpack_file_full_path in unpack_file_full_path_list:
                        try:kind = filetype.guess(unpack_file_full_path)
                        except OSError:continue
                        if kind is None:
                            if len(url.split('.')[-1]) < 4:
                                others_paths = os.path.join(file_type_path, url.split('.')[-1])
                                if not os.path.exists(others_paths): os.makedirs(others_paths)
                                others_file_name_full_path = os.path.join(others_paths, sha256)
                            else:
                                others_file_name_full_path = os.path.join(others_paths, sha256)
                            shutil.copy(unpack_file_full_path, others_file_name_full_path)
                            continue

                        else:
                            extension_paths = os.path.join(file_type_path, kind.extension)
                            extension_file_name_full_path = os.path.join(extension_paths, sha256)
                            if not os.path.exists(extension_paths): os.makedirs(extension_paths)
                            shutil.copy(unpack_file_full_path, extension_file_name_full_path)
                            continue
                else:
                    temp_file_name_full_path=temp_file_name_full_path

                    try:kind = filetype.guess(temp_file_name_full_path)
                    except OSError:continue

                    if kind is None:
                        others_file_name_full_path = os.path.join(others_paths, sha256)
                        shutil.copy(temp_file_name_full_path, others_file_name_full_path)
                        continue
                    else:
                        extension_paths = os.path.join(file_type_path, kind.extension)
                        extension_file_name_full_path = os.path.join(extension_paths, sha256)
                        if not os.path.exists(extension_paths): os.makedirs(extension_paths)
                        shutil.copy(temp_file_name_full_path, extension_file_name_full_path)
                        continue

def urlhaus():

    request_header = {
        'Accept': 'text/html, application/xhtml+xml, image/jxr, */*',
        'Accept-Language': 'ko-KR',
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64; Trident/7.0; rv:11.0) like Gecko',
        'Accept-Encoding': 'gzip, deflate',
        'Connection': 'close'}
    while True:
        url_list="https://urlhaus.abuse.ch/browse/page/0","https://urlhaus.abuse.ch/browse/page/1"
        default_path="https://urlhaus.abuse.ch"
        for url in url_list:
            resp = requests.get(url,headers=request_header)
            soup=parse(resp.content)

            #time.sleep(3)
            links = soup.select("tbody > tr > td > a")
            for link in links:
                href=link.attrs['href']
                if 'url' in href:
                    child_url_link=default_path+href
                    #print(child_url_link)
                    time.sleep(3)
                    child_soup=parse(child_url_link)
                    links = child_soup.select("tbody > tr > td > span")[0]
                    malware_url=links.string
                    #print(malware_url)
                    try:
                        response = get(malware_url)
                        malware_file_data = response.content
                    except:
                        continue
                    try:sha256 = hashlib.sha256(malware_file_data).hexdigest()
                    except:sha256 = hashlib.sha256(malware_file_data.encode()).hexdigest()

                    temp_file_name_full_path=os.path.join(temp_paths,sha256)
                    if not os.path.isfile(temp_file_name_full_path):
                        with open(temp_file_name_full_path,'wb') as file_handle:file_handle.write(malware_file_data)
                    try:kind = filetype.guess(temp_file_name_full_path)
                    except OSError:continue

                    if kind is None:
                        if len(url.split('.')[-1])<4:
                            ext_path=os.path.join(file_type_path,url.split('.')[-1])
                            print(ext_path)
                            if not os.path.exists(ext_path): os.makedirs(ext_path)
                            others_file_name_full_path=os.path.join(ext_path,sha256)
                        else:
                            others_file_name_full_path=os.path.join(others_paths,sha256)
                        shutil.move(temp_file_name_full_path,others_file_name_full_path)
                        continue

                    else:
                        extension_paths=os.path.join(file_type_path,kind.extension)
                        print(extension_paths)
                        extension_file_name_full_path=os.path.join(extension_paths,sha256)
                        if not os.path.exists(extension_paths):os.makedirs(extension_paths)
                        shutil.move(temp_file_name_full_path,extension_file_name_full_path)
                        continue


'''
                        try:kind = filetype.guess(rename_file_full_path2)
                        except OSError:continue

                        if kind is None:
                            other_file_name_full_path2=os.path.join(file_type_path,file_sha256_hash2)
                            shutil.move(rename_file_full_path2,other_file_name_full_path2)
                            continue

                        else:
                            extension_paths2=os.path.join(file_type_path,kind.extension)
                            extension_file_name_full_path2=os.path.join(extension_paths2,file_sha256_hash2)
                            if not os.path.exists(extension_paths2):os.makedirs(extension_paths2)
                            shutil.move(rename_file_full_path2,extension_file_name_full_path2)
                            continue
'''



def bazaar():
    ZIP_PASSWORD = b"infected"
    while True:
        default_path="https://mb-api.abuse.ch/downloads/"
        soup=parse(default_path)

        links = soup.select("table > tr > td > a")
        time_ago = datetime.datetime.now() - datetime.timedelta(days = 1)
        time_ago = time_ago.strftime("%Y-%m-%d")
        daily_file_list=os.listdir(daily_malware_paths)

        for link in links:
            href=link.attrs['href']
            if len(href)<3:continue
            #if time_ago!=href.split('.')[0]:continue
            if href.split('.') in daily_file_list:continue
            child_url_link=default_path+href

            try:
                response = get(child_url_link)
                malware_file_data = response.content
            except:
                continue


            daily_file_name_full_path=os.path.join(daily_malware_paths,href)
            #print(daily_file_name_full_path)
            if not os.path.isfile(daily_file_name_full_path):
                with open(daily_file_name_full_path,'wb') as file_handle:file_handle.write(malware_file_data)

            #pyunpack.Archive(daily_file_name_full_path+'.zip').extractall(daily_file_name_full_path)

            malware_daily_zip = zipfile.ZipFile(daily_file_name_full_path)
            malware_daily_zip.setpassword(ZIP_PASSWORD)
            malware_daily_zip.extractall(daily_malware_paths_temp)
            malware_daily_zip.close()
            extract_file_list=[os.path.join(daily_malware_paths_temp,filename) for filename in os.listdir(daily_malware_paths_temp)]
            for file_full_path in extract_file_list:

                try:
                    Archive(file_full_path).extractall(daily_malware_paths_temp2)
                    print(file_full_path)
                    extract_file_list2=[os.path.join(daily_malware_paths_temp2,filename) for filename in os.listdir(daily_malware_paths_temp2)]
                    for file_full_path2 in extract_file_list2:
                        file_data2=open(file_full_path2,'rb').read()
                        file_sha256_hash2=hashlib.sha256(file_data2).hexdigest()
                        rename_file_full_path2=os.path.join(daily_malware_paths_temp2,file_sha256_hash2)
                        os.rename(file_full_path2,rename_file_full_path2)

                        try:kind = filetype.guess(rename_file_full_path2)
                        except OSError:continue

                        if kind is None:
                            other_file_name_full_path2=os.path.join(file_type_path,file_sha256_hash2)
                            shutil.move(rename_file_full_path2,other_file_name_full_path2)
                            continue

                        else:
                            extension_paths2=os.path.join(file_type_path,kind.extension)
                            extension_file_name_full_path2=os.path.join(extension_paths2,file_sha256_hash2)
                            if not os.path.exists(extension_paths2):os.makedirs(extension_paths2)
                            shutil.move(rename_file_full_path2,extension_file_name_full_path2)
                            continue


                except ValueError:
                    print(file_full_path)
                    file_data=open(file_full_path,'rb').read()
                    file_sha256_hash=hashlib.sha256(file_data).hexdigest()

                    if '.' in file_full_path:
                        try:
                            rename_file_full_path=os.path.join(daily_malware_paths_temp,file_sha256_hash)
                            os.rename(file_full_path,rename_file_full_path)

                            try:kind = filetype.guess(rename_file_full_path)
                            except OSError:continue

                            if kind is None:
                                other_file_name_full_path=os.path.join(file_type_path,file_sha256_hash)
                                shutil.move(rename_file_full_path,other_file_name_full_path)
                                continue

                            else:
                                extension_paths=os.path.join(file_type_path,kind.extension)
                                extension_file_name_full_path=os.path.join(extension_paths,file_sha256_hash)
                                if not os.path.exists(extension_paths):os.makedirs(extension_paths)
                                shutil.move(rename_file_full_path,extension_file_name_full_path)
                                continue


                        except FileExistsError:
                            os.remove(file_full_path)

"""
    malc0de_proc = Process(target=malc0de, args=())
수집대상 URL
https://urlhaus.abuse.ch/browse/
http://www.virusign.com/ -> 회원가입 필요 ㅄ
http://contagiominidump.blogspot.com/2018/ -> 다운로드 후 unzip 필요
https://dasmalwerk.eu/ -> 다운로드 후 unzip 필요 -> 패스워드 infected
"""

if __name__=="__main__":
    # start Multi Process
    #malc0de()
    urlhaus()
    bazaar()
    '''
    dasmalwerk_proc = Process(target=dasmalwerk, args=())
    dasmalwerk_proc.start()
    urlhaus_proc = Process(target=urlhaus, args=())
    urlhaus_proc.start()
    malc0de_proc=Process(target=malc0de,args=())
    malc0de_proc.start()
    bazaar_proc = Process(target=bazaar, args=())
    bazaar_proc.start()

    '''
