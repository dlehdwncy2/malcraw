
import sys
import hashlib
import re
import os
from multiprocessing import Process, current_process ,Queue, Pool
import socket
import datetime
import time
import urllib
import urllib.request
import zipfile
import json
import hashlib
import shutil
from urllib.request import Request, urlopen

from requests import get
from pyunpack import Archive
import filetype
from bs4 import BeautifulSoup
import requests




PATH="/home/leedongju/_data_set/MAL_DATASET"
PATH_OTHERS="/home/leedongju/_data_set/OTHERS"
PATH_TEMP="/home/leedongju/_data_set/TEMP"
if not os.path.exists(PATH): os.makedirs(PATH)
if not os.path.exists(PATH_OTHERS): os.makedirs(PATH_OTHERS)
if not os.path.exists(PATH_TEMP): os.makedirs(PATH_TEMP)

def parse(url):
    response=requests.get(url)
    html = response.text
    soup = BeautifulSoup(html, 'html.parser')
    return soup



def get_sample_sha256(malware_data):
    try:sha256=hashlib.sha256(malware_data).hexdigest()
    except:sha256=hashlib.sha256(malware_data.encode()).hexdigest()

    return sha256


unzip_list=['7z','bz2','xz','tar','rar','Z','lz','sqlite','swf','gz','zip','ar','arj','xz']
def unzip_sample(temp_sample_path,_password=None):
    dir_path=os.path.dirname(temp_sample_path)
    if os.path.isdir(temp_sample_path):return
    if os.path.exists(temp_sample_path)!=True:return
    kind=filetype.guess(temp_sample_path)
    
    def _zip():
        try:
            zFile=zipfile.ZipFile(temp_sample_path)
        except zipfile.BadZipFile:
            etc_unpack()
            return

        if _password:
            try:
                zFile.setpassword(_password)
            except:
                pass
        for zfile_name in zFile.namelist():
            #Temp 경로에 압축해제 압축해재시 압축파일 내부에 있는 이름으로 진행
            try:
                zFile.extract(zfile_name,dir_path)
            except:
                continue
            #Temp에 압축해제된 파일 풀 경로 설정
            #unpack_file_path=os.path.join(dir_path,zfile_name)
            #unpack_file_path_list.append(unpack_file_path)
        zFile.close()
        '''
        for unpack_file_path in unpack_file_path_list:
            if os.path.isfile(unpack_file_path):
                kind=filetype.guess(unpack_file_path)
                if kind!=None and kind in unzip_list:
                    unzip_sample(unpack_file_path,_password)
        '''
    def etc_unpack():
        temp_sample_dir_path=temp_sample_path.split('.')[0]
        try:
            Archive(temp_sample_path).extractall(temp_sample_dir_path)
        except:
            return
        '''
        unpack_file_path_list=[os.path.join(os.path.dirname(temp_sample_dir_path),extract_file) for extract_file  in os.listdir(temp_sample_dir_path)]
        for unpack_file_path in unpack_file_path_list:
            if os.path.isfile(unpack_file_path):
                kind=filetype.guess(unpack_file_path)
                if kind!=None and kind in unzip_list:
                    unzip_sample(unpack_file_path,_password)
        '''
    if kind!=None:
        if kind.extension=='zip':
            _zip()
        elif kind.extension in unzip_list:
            etc_unpack()

        if kind.extension in unzip_list:
            try:
                os.remove(temp_sample_path)
            except:
                return

def dir_remove(temp_sample_list):
    
    dir_list=list()
    for temp_sample in temp_sample_list:
        if temp_sample==PATH_TEMP:continue

        if os.path.isdir(temp_sample):
            dir_list.append(temp_sample)

    for dir_ in list(set(dir_list)):
        shutil.rmtree(dir_,ignore_errors=True)

def sample_move_extenstion(temp_sample):
    if os.path.isdir(temp_sample):return
    if os.path.exists(temp_sample)!=True:return

    kind = filetype.guess(temp_sample)
    if kind!=None:
        if kind in unzip_list:
            return

    ext_fname_path,ext_path=get_type(temp_sample)
    if ext_fname_path==None: 
        shutil.move(temp_sample,os.path.join(PATH_OTHERS,os.path.basename(temp_sample)))
    else:
        if not os.path.exists(ext_path): 
            os.makedirs(ext_path)
        shutil.move(temp_sample,ext_fname_path)     



def _process_convert():

    temp_sample_list=[os.path.join(PATH_TEMP,fname) for fname in [fname for fname in os.listdir(PATH_TEMP)]]
    for temp_sample in temp_sample_list:
        if temp_sample==PATH_TEMP:continue
        dir_move_sample(temp_sample)
        sample_move_extenstion(temp_sample)
        unzip_sample(temp_sample)
    dir_remove(temp_sample_list)

def dir_move_sample(temp_sample_path):
    if os.path.isdir(temp_sample_path):
        for root, dirs, files in os.walk(temp_sample_path):
            for file_ in files:
                shutil.move(os.path.join(root,file_),os.path.join(PATH_TEMP,file_))

def get_type(temp_sample_path):
    try:
        kind = filetype.guess(temp_sample_path)
    except OSError:
        return None, ''

    file_name=os.path.basename(temp_sample_path).split('.')[0]

    if kind==None:
        
        if len(os.path.basename(file_name).split('.'))>=2:
            ext=os.path.basename(file_name).split('.')[1]
            ext_path=os.path.join(PATH,ext)
            ext_fname_path=os.path.join(ext_path,file_name)
            return ext_fname_path,ext_path
        else:

            return None,''

    else:
        ext_path=os.path.join(PATH,kind.extension)
        ext_fname_path=os.path.join(ext_path,file_name)
        return ext_fname_path,ext_path


def create_sample_temp_path(sha256,malware_data):
    sample_name=os.path.join(PATH_TEMP,sha256)
    with open(sample_name,'wb') as file_handle:
        file_handle.write(malware_data)
        
    return sample_name

def run_get_sample(malware_data,password=None):
    sha256=get_sample_sha256(malware_data)
    temp_sample_path=create_sample_temp_path(sha256,malware_data)
    if not os.path.isfile(temp_sample_path):
        return
    kind=filetype.guess(temp_sample_path)
    if kind!=None and kind.extension=='zip':
        unzip_sample(temp_sample_path,_password=password)
##########################################################

def malc0de():
    soup=parse('http://malc0de.com/rss')
    mlc=[row for row in soup('description')][1:]
    mlc_sites = list()
    for row in mlc:
        site = re.sub('&', '&', str(row).split()[1]).replace(',', '')
        mlc_sites.append(site)

    for url in mlc_sites:
        if not re.match('http', url):url = 'http://' + url
        try:
            response=get(url)
            malware_data = response.content
        except:
            continue
        
        run_get_sample(malware_data)


def dasmalwerk():
    url="https://das-malwerk.herokuapp.com/"

    soup=parse(url)
    links = soup.select("tbody > tr > td > a")
    for link in links:
        malware_url = link.attrs['href']
        if 'virustotal' in malware_url:continue

        try:
            response = get(malware_url)
            malware_data = response.content
        except:
            continue

        run_get_sample(malware_data,b'infected')

def urlhaus():

    request_header = {
        'Accept': 'text/html, application/xhtml+xml, image/jxr, */*',
        'Accept-Language': 'ko-KR',
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64; Trident/7.0; rv:11.0) like Gecko',
        'Accept-Encoding': 'gzip, deflate',
        'Connection': 'close'}

    url_list="https://urlhaus.abuse.ch/browse/page/0","https://urlhaus.abuse.ch/browse/page/1"
    default_path="https://urlhaus.abuse.ch"
    for url in url_list:
        soup=parse(url)

        #time.sleep(3)
        links = soup.select("tbody > tr > td > a")
        for link in links:
            href=link.attrs['href']
            if 'url' in href:
                child_url_link=default_path+href

                time.sleep(3)
                child_soup=parse(child_url_link)
                links = child_soup.select("tbody > tr > td > span")[0]
                malware_url=links.string

                try:
                    response = get(malware_url)
                    malware_data = response.content
                except:
                    continue

                run_get_sample(malware_data,b'infected')



def bazaar():

    ZIP_PASSWORD = b"infected"

    default_path="https://mb-api.abuse.ch/downloads/"
    soup=parse(default_path)

    links = soup.select("table > tr > td > a")

    for link in links:
        zip_name=link.attrs['href']
        if len(zip_name)<3:continue


        child_url_link=default_path+zip_name
        try:
            response = get(child_url_link)
            malware_data = response.content
        except:
            continue
        '''
        malware_daily_zip=os.path.join(PATH_DAILY,zip_name)
        if not os.path.isfile(malware_daily_zip):
            with open(malware_daily_zip,'wb') as file_handle:
                file_handle.write(malware_data)
        '''
        sha256=get_sample_sha256(malware_data)
        temp_sample_path=create_sample_temp_path(sha256,malware_data)

        run_get_sample(malware_data,b'infected')

        '''
            daily_file_name_full_path=os.path.join(daily_malware_paths,zip_name)
            #print(daily_file_name_full_path)
            if not os.path.isfile(daily_file_name_full_path):
                with open(daily_file_name_full_path,'wb') as file_handle:file_handle.write(malware_file_data)

            #pyunpack.Archive(daily_file_name_full_path+'.zip').extractall(daily_file_name_full_path)

            malware_daily_zip = zipfile.ZipFile(daily_file_name_full_path)
            malware_daily_zip.setpassword(ZIP_PASSWORD)
            malware_daily_zip.extractall(daily_malware_paths_temp)
            malware_daily_zip.close()
            extract_file_list=[os.path.join(daily_malware_paths_temp,filename) for filename in os.listdir(daily_malware_paths_temp)]
            for file_full_path in extract_file_list:

                try:
                    Archive(file_full_path).extractall(daily_malware_paths_temp2)
                    print(file_full_path)
                    extract_file_list2=[os.path.join(daily_malware_paths_temp2,filename) for filename in os.listdir(daily_malware_paths_temp2)]
                    for file_full_path2 in extract_file_list2:
                        file_data2=open(file_full_path2,'rb').read()
                        file_sha256_hash2=hashlib.sha256(file_data2).hexdigest()
                        rename_file_full_path2=os.path.join(daily_malware_paths_temp2,file_sha256_hash2)
                        os.rename(file_full_path2,rename_file_full_path2)

                        try:kind = filetype.guess(rename_file_full_path2)
                        except OSError:continue

                        if kind is None:
                            other_file_name_full_path2=os.path.join(file_type_path,file_sha256_hash2)
                            shutil.move(rename_file_full_path2,other_file_name_full_path2)
                            continue

                        else:
                            extension_paths2=os.path.join(file_type_path,kind.extension)
                            extension_file_name_full_path2=os.path.join(extension_paths2,file_sha256_hash2)
                            if not os.path.exists(extension_paths2):os.makedirs(extension_paths2)
                            shutil.move(rename_file_full_path2,extension_file_name_full_path2)
                            continue


                except ValueError:
                    print(file_full_path)
                    file_data=open(file_full_path,'rb').read()
                    file_sha256_hash=hashlib.sha256(file_data).hexdigest()

                    if '.' in file_full_path:
                        try:
                            rename_file_full_path=os.path.join(daily_malware_paths_temp,file_sha256_hash)
                            os.rename(file_full_path,rename_file_full_path)

                            try:kind = filetype.guess(rename_file_full_path)
                            except OSError:continue

                            if kind is None:
                                other_file_name_full_path=os.path.join(file_type_path,file_sha256_hash)
                                shutil.move(rename_file_full_path,other_file_name_full_path)
                                continue

                            else:
                                extension_paths=os.path.join(file_type_path,kind.extension)
                                extension_file_name_full_path=os.path.join(extension_paths,file_sha256_hash)
                                if not os.path.exists(extension_paths):os.makedirs(extension_paths)
                                shutil.move(rename_file_full_path,extension_file_name_full_path)
                                continue


                        except FileExistsError:
                            os.remove(file_full_path)
    '''

"""
    malc0de_proc = Process(target=malc0de, args=())
수집대상 URL
https://urlhaus.abuse.ch/browse/
http://www.virusign.com/ -> 회원가입 필요 ㅄ
http://contagiominidump.blogspot.com/2018/ -> 다운로드 후 unzip 필요
https://dasmalwerk.eu/ -> 다운로드 후 unzip 필요 -> 패스워드 infected
"""


def run_main():
    while True:
        _process_convert()
        bazaar()
        dasmalwerk()
        malc0de()
        urlhaus()
        time.sleep(100)

if __name__=="__main__":
    run_main()